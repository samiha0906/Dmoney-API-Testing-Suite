{
	"info": {
		"_postman_id": "6af11688-3187-4fa1-88a9-d85d14fdfa85",
		"name": "DMoney Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38882458"
	},
	"item": [
		{
			"name": "Admin Signup",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"if (jsonData.token) {\r",
									"\r",
									"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    \r",
									"    console.log(\"Token dynamically updated:\", jsonData.token);\r",
									"} \r",
									"else {\r",
									"    console.error(\"Token not found in the response.\");\r",
									"}\r",
									"pm.test(\"Check if login is successful\",()=>{\r",
									"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
									"})\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with invalid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"If user inputs wrong cred, should not succeesfully logged in\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@roadtocareer.net\",\r\n    \"password\": \"10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Agent",
			"item": [
				{
					"name": "create agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" \r",
									"let randomId = _.random(100000, 999999); \r",
									"let prefix = \"01302\";                   \r",
									"let agentPhoneNumber = prefix + randomId; \r",
									"\r",
									"console.log(\"Generated Agent Phone Number:\", agentPhoneNumber);\r",
									"\r",
									"pm.collectionVariables.set(\"agentPhoneNumber\", agentPhoneNumber);\r",
									"\r",
									"console.log(\"Agent Phone Number Set:\", pm.collectionVariables.get(\"agentPhoneNumber\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"let agentId = jsonData.user.id; \r",
									"let agentEmail = jsonData.user.email; \r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"agentId\", agentId);\r",
									"pm.collectionVariables.set(\"agentEmail\", agentEmail.toLowerCase());\r",
									"\r",
									"console.log(\"Agent ID:\", agentId);\r",
									"console.log(\"Agent Email:\", agentEmail.toLowerCase());\r",
									"\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).to.include(\"User created\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Agent {{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1235\",\r\n    \"phone_number\": \"{{agentPhoneNumber}}\",\r\n    \"nid\": \"987654321\",\r\n    \"role\": \"Agent\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "create agent with Duplicate  email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"If duplicate email, show 'User already exists' message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User already exists\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 208 for duplicate user\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Tily Scott\",\r\n    \"email\": \"tily@yahoo.com\",\r\n    \"password\": \"1244\",\r\n    \"phone_number\": \"01301101063\",\r\n    \"nid\": \"123456789\",\r\n    \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Customers",
			"item": [
				{
					"name": "Create 1st customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let randomId = _.random(100000, 999999); \r",
									"let prefix = \"01303\";\r",
									"let customer1PhoneNumber = prefix + randomId; \r",
									"\r",
									"console.log(\"Generated Phone Number for Customer1:\", customer1PhoneNumber);\r",
									"\r",
									"pm.collectionVariables.set(\"customer1PhoneNumber\", customer1PhoneNumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let customer1Id = jsonData.user.id; \r",
									"let customer1Email = jsonData.user.email; \r",
									"\r",
									"pm.collectionVariables.set(\"customer1Id\", customer1Id);\r",
									"pm.collectionVariables.set(\"customer1Email\", customer1Email.toLowerCase());\r",
									"console.log(\"Customer1 ID:\", customer1Id);\r",
									"console.log(\"Customer1 Email:\", customer1Email.toLowerCase());\r",
									"\r",
									"\r",
									"pm.test(\"Check new user is created\", function () {\r",
									"    pm.expect(jsonData.message).to.include(\"User created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\": \"Customer1 {{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1222\",\r\n    \"phone_number\": \"{{customer1PhoneNumber}}\",\r\n    \"nid\": \"123456789\",\r\n    \"role\": \"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2nd customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId = _.random(100000, 999999);\r",
									"let prefix = \"01304\";\r",
									"let customer2PhoneNumber = prefix + randomId; \r",
									"\r",
									"console.log(\"Generated Phone Number for Customer2:\", customer2PhoneNumber);\r",
									"\r",
									"pm.collectionVariables.set(\"customer2PhoneNumber\", customer2PhoneNumber);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let customer2Id = jsonData.user.id; \r",
									"let customer2Email = jsonData.user.email;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"customer2Id\", customer2Id);\r",
									"pm.collectionVariables.set(\"customer2Email\", customer2Email.toLowerCase());\r",
									"\r",
									"console.log(\"Customer2 ID:\", customer2Id);\r",
									"console.log(\"Customer2 Email:\", customer2Email.toLowerCase());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\": \"Customer2 {{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1333\",\r\n    \"phone_number\": \"{{customer2PhoneNumber}}\",\r\n    \"nid\": \"987654321\",\r\n    \"role\": \"Customer\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid phonenumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Validate 'phone_number' length error message\", function () {\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.expect(jsonData.message).to.eql(\"\\\"phone_number\\\" length must be at least 11 characters long\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 for invalid phone_number length\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ira Rahman\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1244\",\r\n    \"phone_number\": \"00200\",\r\n    \"nid\": \"1234567\",\r\n    \"role\": \"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Merchant",
			"item": [
				{
					"name": "Create Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomId = _.random(100000, 999999);\r",
									"let prefix = \"01700\";\r",
									"let merchantPhoneNumber = prefix + randomId; \r",
									"console.log(\"Generated Merchant Phone Number:\", merchantPhoneNumber);\r",
									"\r",
									"pm.collectionVariables.set(\"merchantPhoneNumber\", merchantPhoneNumber);\r",
									"\r",
									"console.log(\"Merchant Phone Number Set:\", pm.collectionVariables.get(\"merchantPhoneNumber\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let merchantId = jsonData.user.id; \r",
									"let merchantEmail = jsonData.user.email; \r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"merchantId\", merchantId);\r",
									"pm.collectionVariables.set(\"merchantEmail\", merchantEmail.toLowerCase());\r",
									"\r",
									"console.log(\"Merchant ID:\", merchantId);\r",
									"console.log(\"Merchant Email:\", merchantEmail.toLowerCase());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{partnerkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Merchant {{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1236\",\r\n    \"phone_number\": \"{{merchantPhoneNumber}}\",\r\n    \"nid\": \"987654321\",\r\n    \"role\": \"Merchant\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction Mnagement",
			"item": [
				{
					"name": "Deposit Money",
					"item": [
						{
							"name": "Deposit  From System to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Message confirms 'Deposit successful'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Deposit successful\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201 Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Transaction ID exists and is valid\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"trnxId\");\r",
											"    pm.expect(jsonData.trnxId).to.be.a('string').and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Commission is a valid positive number\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"commission\");\r",
											"    pm.expect(jsonData.commission).to.be.a('number').and.to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Current balance exists and is a valid number\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"currentBalance\");\r",
											"    pm.expect(jsonData.currentBalance).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 2000\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dep from Agent to Customer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",\r\n  \"to_account\": \"{{customer1PhoneNumber}}\",\r\n  \"amount\": 500\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check agent  balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Message includes 'User balance'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"User balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agentPhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agentPhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deposit  to invalid account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates 'To Account does not exist'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"To Account does not exist\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentPhoneNumber}}\",\r\n  \"to_account\": \"invalidaccount\",\r\n  \"amount\": 20\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Money",
					"item": [
						{
							"name": "send money from Cust1 to Cust2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201 Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message confirms 'Send money successful'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Send money successful\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer2PhoneNumber}}\",\r\n  \"amount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "send money with insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Message includes 'Insufficient balance'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Insufficient balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Current balance is less than the transfer amount\", function () {\r",
											"    const attemptedAmount = 8000; \r",
											"    pm.expect(jsonData.currentBalance).to.be.below(attemptedAmount);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208 for insufficient balance\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer2PhoneNumber}}\",\r\n  \"amount\": 8000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Same account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Test 1: Validate the response message\r",
											"pm.test(\"Message includes 'From account and to account cannot be the same'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"From account and to account cannot be the same\");\r",
											"});\r",
											"\r",
											"// Test 2: Validate the status code is 208\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{customer1PhoneNumber}}\",\r\n  \"amount\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdraw Money",
					"item": [
						{
							"name": "withdraw from cust to agent",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "withdraw below min limit",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1PhoneNumber}}\",\r\n  \"to_account\": \"{{agentPhoneNumber}}\",\r\n  \"amount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Make Payment",
					"item": [
						{
							"name": "payment from Cust2  to merchant",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2PhoneNumber}}\",\r\n  \"to_account\": \"{{merchantPhoneNumber}}\",\r\n  \"amount\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Statement",
					"item": [
						{
							"name": "1st customer's statement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Message is 'Transaction list'\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Transaction list\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer1PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer1PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st customer's balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Message includes 'User balance'\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"User balance\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Balance field exists and is a valid number\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"balance\");\r",
											"    pm.expect(jsonData.balance).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Balance is a positive value\", function () {\r",
											"    pm.expect(jsonData.balance).to.be.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer1PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer1PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Customer's statement",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer2PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer2PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd customer's balance",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer2PhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer2PhoneNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Merchant balance",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerkey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{merchantPhoneNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{merchantPhoneNumber}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYWRtaW5Acm9hZHRvY2FyZWVyLm5ldCIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTczNDQyNzEzNywiZXhwIjoxNzM0NDMwNzM3fQ.WjEsRYNx9rsGEcHiSUQMDFKOh0WBjmsa6SjskqeTD1U"
		},
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "partnerkey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "agentPhoneNumber",
			"value": "01302883270"
		},
		{
			"key": "agentId",
			"value": 38325
		},
		{
			"key": "agentEmail",
			"value": "sienna61@gmail.com"
		},
		{
			"key": "customer1PhoneNumber",
			"value": "01303951384"
		},
		{
			"key": "customer2PhoneNumber",
			"value": "01304640815"
		},
		{
			"key": "customer1Id",
			"value": 38326
		},
		{
			"key": "customer1Email",
			"value": "kristopher.casper56@hotmail.com"
		},
		{
			"key": "customer2Id",
			"value": 38305
		},
		{
			"key": "customer2Email",
			"value": "madaline.yost@yahoo.com"
		},
		{
			"key": "merchantPhoneNumber",
			"value": "01700927158"
		},
		{
			"key": "merchantId",
			"value": 38316
		},
		{
			"key": "merchantEmail",
			"value": "noah_nikolaus43@hotmail.com"
		}
	]
}